diff --git a/modules/contrib/smtp/smtp.info.yml b/modules/contrib/smtp/smtp.info.yml
index a8f9451..7a9bf53 100644
--- a/modules/contrib/smtp/smtp.info.yml
+++ b/modules/contrib/smtp/smtp.info.yml
@@ -1,5 +1,5 @@
 name: SMTP Authentication Support
-description: "Allow for site emails to be sent through an SMTP server of your choice."
+description: "Allow for site emails to be sent through a SMTP server of your choice."
 package: Mail
 type: module
 # core: 8.x
diff --git a/modules/contrib/smtp/smtp.install b/modules/contrib/smtp/smtp.install
index 543ab86..17a9359 100644
--- a/modules/contrib/smtp/smtp.install
+++ b/modules/contrib/smtp/smtp.install
@@ -9,6 +9,10 @@
  * Implements hook_install().
  */
 function smtp_install() {
+  // Retrieve current system mail interface.
+  $factory = \Drupal::configFactory();
+  $mail_interface = $factory->getEditable('system.mail')
+    ->get('interface');
   // Setting default config vars.
   \Drupal::service('config.factory')->getEditable('smtp.settings')
     ->set('smtp_on', 0)
@@ -20,9 +24,10 @@ function smtp_install() {
     ->set('smtp_password', '')
     ->set('smtp_from', '')
     ->set('smtp_fromname', '')
-    ->set('smtp_allowhtml', '')
-    ->set('smtp_test_address', '')
+    ->set('smtp_allowhtml', 0)
+    ->set('smtp_queue', 0)
     ->set('smtp_debugging', 0)
+    ->set('prev_mail_system', $mail_interface)
     ->save();
 }
 
@@ -30,10 +35,12 @@ function smtp_install() {
  * Implements hook_uninstall().
  */
 function smtp_uninstall() {
-  $smtp_config = \Drupal::service('config.factory')->getEditable('smtp.settings');
+  $smtp_config = \Drupal::service('config.factory')
+    ->getEditable('smtp.settings');
 
   // Restore previous mail system.
-  \Drupal::config('system.mail')
+  $factory = \Drupal::configFactory();
+  $factory->getEditable('system.mail')
     ->set('interface', $smtp_config->get('prev_mail_system'))
     ->save();
 
diff --git a/modules/contrib/smtp/smtp.module b/modules/contrib/smtp/smtp.module
index d75b5be..eca629b 100644
--- a/modules/contrib/smtp/smtp.module
+++ b/modules/contrib/smtp/smtp.module
@@ -26,18 +26,6 @@ function smtp_help($path, $arg) {
 }
 
 /**
- * Implements hook_menu().
- */
-function smtp_menu() {
-  $items['admin/config/system/smtp'] = array(
-    'title' => 'SMTP Authentication Support',
-    'description' => 'Allow for site emails to be sent through an SMTP server of your choice.',
-    'route_name' => 'smtp.config',
-  );
-  return $items;
-}
-
-/**
  * Implements hook_permission().
  */
 function smtp_permission() {
@@ -49,7 +37,6 @@ function smtp_permission() {
   );
 }
 
-
 /**
  * Implements hook_mail().
  */
@@ -81,10 +68,19 @@ function smtp_send_queue($mailerObj) {
   $queue->createItem($mailerObj);
 }
 
+/**
+ * @TODO Documentation
+ * @param $variables
+ */
 function smtp_send_queue_runner($variables) {
   _smtp_mailer_send($variables);
 }
 
+/**
+ * @TODO Documentation
+ * @param $variables
+ * @return bool
+ */
 function _smtp_mailer_send($variables) {
   $mailer = $variables['mailer'];
   $to = $variables['to'];
@@ -97,7 +93,11 @@ function _smtp_mailer_send($variables) {
 
   // Try to send e-mail. If it fails, set watchdog entry.
   if (!$mailer->Send()) {
-    $logger->error('Error sending e-mail from @from to @to : !error_message', array('@from' => $from, '@to' => $to, '!error_message' => $mailer->ErrorInfo));
+    $logger->error('Error sending e-mail from @from to @to : !error_message', array(
+      '@from' => $from,
+      '@to' => $to,
+      '!error_message' => $mailer->ErrorInfo
+    ));
     return FALSE;
   }
 
diff --git a/modules/contrib/smtp/src/Form/SMTPConfigForm.php b/modules/contrib/smtp/src/Form/SMTPConfigForm.php
index 4c33420..c4d1ad5 100644
--- a/modules/contrib/smtp/src/Form/SMTPConfigForm.php
+++ b/modules/contrib/smtp/src/Form/SMTPConfigForm.php
@@ -37,7 +37,7 @@ public function buildForm(array $form, FormStateInterface $form_state) {
     }
 
     $form['onoff'] = array(
-      '#type'  => 'fieldset',
+      '#type' => 'fieldset',
       '#title' => t('Install options'),
     );
     $form['onoff']['smtp_on'] = array(
@@ -49,7 +49,7 @@ public function buildForm(array $form, FormStateInterface $form_state) {
     );
 
     $form['server'] = array(
-      '#type'  => 'fieldset',
+      '#type' => 'fieldset',
       '#title' => t('SMTP server settings'),
     );
     $form['server']['smtp_host'] = array(
@@ -114,7 +114,7 @@ public function buildForm(array $form, FormStateInterface $form_state) {
     );
 
     $form['email_options'] = array(
-      '#type'  => 'fieldset',
+      '#type' => 'fieldset',
       '#title' => t('E-mail options'),
     );
     $form['email_options']['smtp_from'] = array(
@@ -128,7 +128,7 @@ public function buildForm(array $form, FormStateInterface $form_state) {
       '#title' => t('E-mail from name'),
       '#default_value' => $config->get('smtp_fromname'),
       '#description' => t('The name that all e-mails will be from. If left blank will use a default of: !name',
-          ['!name' => $this->configFactory->get('system.site')->get('name')]),
+        ['!name' => $this->configFactory->get('system.site')->get('name')]),
     );
     $form['email_options']['smtp_allowhtml'] = array(
       '#type' => 'checkbox',
@@ -136,6 +136,13 @@ public function buildForm(array $form, FormStateInterface $form_state) {
       '#default_value' => $config->get('smtp_allowhtml'),
       '#description' => t('Checking this box will allow HTML formatted e-mails to be sent with the SMTP protocol.'),
     );
+    $form['email_options']['smtp_queue'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Enable SMTP Drupal Queue system'),
+      '#default_value' => $config->get('smtp_queue'),
+      '#description' => t('Checking this box will allow Drupal Queue system handle send e-mails using Cron execution.'),
+    );
+
 
     $form['email_test'] = array(
       '#type' => 'fieldset',
@@ -196,9 +203,12 @@ public function validateForm(array &$form, FormStateInterface $form_state) {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $values = $form_state->getValues();
+    $smtp_interface = ['default' => 'SMTPMailSystem'];
+
+    // Retrieve current settings.
     $config = $this->configFactory->getEditable('smtp.settings');
     $mail_config = $this->configFactory->getEditable('system.mail');
-    $mail_system = $mail_config->get('interface');
+    $mail_interface = $mail_config->get('interface');
 
     // Updating config vars.
     if (isset($values['smtp_password'])) {
@@ -221,19 +231,31 @@ public function submitForm(array &$form, FormStateInterface $form_state) {
       $params['subject'] = t('Drupal SMTP test e-mail');
       $params['body'] = array(t('If you receive this message it means your site is capable of using SMTP to send e-mail.'));
       $account = \Drupal::currentUser();
-      // If module is off, send the test message with SMTP by temporarily overriding.
-      if (!$config->get('smtp_on')) {
-        $original = $mail_config->get('interface');
-        $mail_system['default'] = 'SMTPMailSystem';
-        $mail_config->set('interface', $mail_system)->save();
-      }
-      \Drupal::service('plugin.manager.mail')->mail('smtp', 'smtp-test', $test_address, $account->getPreferredLangcode(), $params);
-      if (!$config->get('smtp_on')) {
-        $mail_config->set('interface', $original)->save();
-      }
+
+      // Send the test message with SMTP by temporarily overriding.
+      $mail_config
+        ->set('interface', $smtp_interface)
+        ->save();
+
+      \Drupal::service('plugin.manager.mail')
+        ->mail('smtp', 'smtp-test', $test_address, $account->getPreferredLangcode(), $params);
       drupal_set_message(t('A test e-mail has been sent to @email via SMTP. You may want to check the log for any error messages.', ['@email' => $test_address]));
     }
 
+    // Define System mail interface.
+    if ($config->get('smtp_on') &&
+      ($smtp_interface['default'] != $mail_interface['default'])
+    ) {
+      $mail_config
+        ->set('interface', $smtp_interface)
+        ->save();
+    }
+    else {
+      $mail_config
+        ->set('interface', $mail_interface)
+        ->save();
+    }
+
     parent::submitForm($form, $form_state);
   }
 
@@ -242,6 +264,7 @@ public function submitForm(array &$form, FormStateInterface $form_state) {
    *
    * @todo - Flesh this out.
    */
-  public function getEditableConfigNames() {}
+  public function getEditableConfigNames() {
+  }
 
 }
diff --git a/modules/contrib/smtp/src/Plugin/Mail/SMTPMailSystem.php b/modules/contrib/smtp/src/Plugin/Mail/SMTPMailSystem.php
index 33ccd64..d88997d 100644
--- a/modules/contrib/smtp/src/Plugin/Mail/SMTPMailSystem.php
+++ b/modules/contrib/smtp/src/Plugin/Mail/SMTPMailSystem.php
@@ -65,7 +65,6 @@ public function format(array $message) {
    *   TRUE if the mail was successfully accepted, otherwise FALSE.
    */
   public function mail(array $message) {
-    $id = $message['id'];
     $to = $message['to'];
     $from = $message['from'];
     $body = $message['body'];
@@ -119,7 +118,7 @@ public function mail(array $message) {
       // . == Matches any single character except line break characters \r and \n.
       // * == Repeats the previous item zero or more times.
       $from_name = preg_replace('/"?([^("\t\n)]*)"?.*$/', '$1', $from); // It gives: Name
-      $from      = preg_replace("/(.*)\<(.*)\>/i", '$2', $from); // It gives: name@domain.tld
+      $from = preg_replace("/(.*)\<(.*)\>/i", '$2', $from); // It gives: name@domain.tld
     }
     elseif (!valid_email_address($from)) {
       drupal_set_message(t('The submitted from address (@from) is not valid.', array('@from' => $from)), 'error');
@@ -128,9 +127,9 @@ public function mail(array $message) {
     }
 
     // Defines the From value to what we expect.
-    $mailer->From     = $from;
+    $mailer->From = $from;
     $mailer->FromName = $from_name;
-    $mailer->Sender   = $from;
+    $mailer->Sender = $from;
 
 
     // Create the list of 'To:' recipients.
@@ -159,11 +158,11 @@ public function mail(array $message) {
             // If a from value was already given, then set based on header.
             // Should be the most common situation since drupal_mail moves the
             // from to headers.
-            $from           = $value;
-            $mailer->From     = $value;
+            $from = $value;
+            $mailer->From = $value;
             // then from can be out of sync with from_name !
             $mailer->FromName = '';
-            $mailer->Sender   = $value;
+            $mailer->Sender = $value;
           }
           break;
         case 'content-type':
@@ -181,7 +180,7 @@ public function mail(array $message) {
           // Set the charset based on the provided value, otherwise set it to UTF-8 (which is Drupals internal default).
           $mailer->CharSet = isset($vars['charset']) ? $vars['charset'] : 'UTF-8';
           // If $vars is empty then set an empty value at index 0 to avoid a PHP warning in the next statement
-          $vars[0] = isset($vars[0])?$vars[0]:'';
+          $vars[0] = isset($vars[0]) ? $vars[0] : '';
 
           switch ($vars[0]) {
             case 'text/plain':
@@ -200,21 +199,21 @@ public function mail(array $message) {
 
               // The message includes an HTML part w/inline attachments.
               $mailer->ContentType = $content_type = 'multipart/related; boundary="' . $boundary . '"';
-            break;
+              break;
             case 'multipart/alternative':
               // The message includes both a plain text and an HTML part.
               $mailer->ContentType = $content_type = 'multipart/alternative';
 
               // Get the boundary ID from the Content-Type header.
               $boundary = $this->_get_substring($value, 'boundary', '"', '"');
-            break;
+              break;
             case 'multipart/mixed':
               // The message includes one or more attachments.
               $mailer->ContentType = $content_type = 'multipart/mixed';
 
               // Get the boundary ID from the Content-Type header.
               $boundary = $this->_get_substring($value, 'boundary', '"', '"');
-            break;
+              break;
             default:
               // Everything else is unsuppored by PHPMailer.
               drupal_set_message(t('The %header of your message is not supported by PHPMailer and will be sent as text/plain instead.', array('%header' => "Content-Type: $value")), 'error');
@@ -349,7 +348,7 @@ public function mail(array $message) {
 
         // Determine if there is an HTML part for when adding the plain text part.
         $text_plain = FALSE;
-        $text_html  = FALSE;
+        $text_html = FALSE;
         foreach ($body_parts as $body_part) {
           if (strpos($body_part, 'text/plain')) {
             $text_plain = TRUE;
@@ -428,10 +427,10 @@ public function mail(array $message) {
           }
           // Add the attachment.
           elseif (strpos($body_part, 'Content-Disposition: attachment;') && !isset($message['params']['attachments'])) {
-            $file_path     = $this->_get_substring($body_part, 'filename=', '"', '"');
-            $file_name     = $this->_get_substring($body_part, ' name=', '"', '"');
+            $file_path = $this->_get_substring($body_part, 'filename=', '"', '"');
+            $file_name = $this->_get_substring($body_part, ' name=', '"', '"');
             $file_encoding = $this->_get_substring($body_part, 'Content-Transfer-Encoding', ' ', "\n");
-            $file_type     = $this->_get_substring($body_part, 'Content-Type', ' ', ';');
+            $file_type = $this->_get_substring($body_part, 'Content-Type', ' ', ';');
 
             if (file_exists($file_path)) {
               if (!$mailer->AddAttachment($file_path, $file_name, $file_encoding, $file_type)) {
@@ -545,9 +544,9 @@ public function mail(array $message) {
    *   An array containing the resulting mime parts
    */
   protected function _boundary_split($input, $boundary) {
-    $parts       = array();
+    $parts = array();
     $bs_possible = substr($boundary, 2, -2);
-    $bs_check    = '\"' . $bs_possible . '\"';
+    $bs_check = '\"' . $bs_possible . '\"';
 
     if ($boundary == $bs_check) {
       $boundary = $bs_possible;
@@ -576,7 +575,12 @@ protected function _remove_headers($input) {
     $part_array = explode("\n", $input);
 
     // will strip these headers according to RFC2045
-    $headers_to_strip = array( 'Content-Type', 'Content-Transfer-Encoding', 'Content-ID', 'Content-Disposition');
+    $headers_to_strip = array(
+      'Content-Type',
+      'Content-Transfer-Encoding',
+      'Content-ID',
+      'Content-Disposition'
+    );
     $pattern = '/^(' . implode('|', $headers_to_strip) . '):/';
 
     while (count($part_array) > 0) {
@@ -624,11 +628,11 @@ protected function _remove_headers($input) {
    *   $ending_character.
    */
   protected function _get_substring($source, $target, $beginning_character, $ending_character) {
-    $search_start     = strpos($source, $target) + 1;
-    $first_character  = strpos($source, $beginning_character, $search_start) + 1;
+    $search_start = strpos($source, $target) + 1;
+    $first_character = strpos($source, $beginning_character, $search_start) + 1;
     $second_character = strpos($source, $ending_character, $first_character) + 1;
-    $substring        = substr($source, $first_character, $second_character - $first_character);
-    $string_length    = strlen($substring) - 1;
+    $substring = substr($source, $first_character, $second_character - $first_character);
+    $string_length = strlen($substring) - 1;
 
     if ($substring[$string_length] == $ending_character) {
       $substring = substr($substring, 0, $string_length);
